@startuml

abstract class GamepadComponent<T, U extends Record<string, T>> {
  - noiseThreshold: number = 0.15
  - inputDelta: number = 0.1
  - indexes: U
  - status: U

  + constructor(indexes: U)
  + updateStatus(newValues: number[]): Partial<U>
  + getStatus(): U
  + getIndexes(): U
  + getIndex(key: keyof U): T
  + getNoiseThreshold(): number
  + setNoiseThreshold(noiseThreshold: number): void
  + getInputDelta(): number
  + setInputDelta(inputDelta: number): void
  - hasBeenUpdated(lastValue: T, newValue: T): boolean
  # abstract getNewValue(key: keyof U, newValues: number[]): T
  # abstract initializeInput(): T
  # abstract isOverNoiseThreshold(value: T): boolean
  # abstract isOverInputDelta(lastValue: T, newValue: T): boolean
}

class GamepadAxes<T extends AxesMapper> extends GamepadComponent {
  # getNewValue(key: keyof T, newValues: number[]): AxisValue
  # initializeInput(): AxisValue
  # isOverNoiseThreshold(value: AxisValue): boolean
  # isOverInputDelta(lastValue: AxisValue, newValue: AxisValue): boolean
}

class GamepadButtons<T extends ButtonMapper> extends GamepadComponent {
  # getNewValue(key: keyof T, newValues: number[]): number
  # initializeInput(): number
  # isOverNoiseThreshold(value: number): boolean
  # isOverInputDelta(lastValue: number, newValue: number): boolean
}

class GamepadController<T extends ButtonMapper,U extends AxesMapper> {
  - pollIntervalMs: number
  - interval: number
  - readonly gamepadIndex: number
  - handleStatusUpdated: StatusUpdatedHandler<T, U>
}

GamepadAxes <-- GamepadController : axes
GamepadButtons <-- GamepadController : buttons

@enduml
