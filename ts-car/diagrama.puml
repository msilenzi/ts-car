@startuml

package GamepadController {
  package GamepadInput {
    abstract class AbstractGamepadInput<T extends AllowedGamepadInputValues> {
        - <<readonly>> index: T
        # status: T

        # <<create>> constructor(index: T)
        + updateStatus(gamepad: Gamepad): boolean
        + {abstract} <<abstract>> initializeStatus(): void
        # {abstract} <<abstract>> hasBeenUpdated(newValue: T): boolean
        # {abstract} <<abstract>> getCurrentValue(gamepad: Gamepad): T
        + getStatus(): T
        + getIndex(): T
    }

    note right of AbstractGamepadInput
      type DualAxisValue = { x: number; y: number }
      type AllowedGamepadInputValues = number | DualAxisValue
    end note

    class DigitalButtonInput<T: number> extends AbstractGamepadInput {
      + <<create>> constructor(index: T)
      # getCurrentValue(gamepad: Gamepad): number
      # hasBeenUpdated(newValue: number): boolean
      + initializeStatus(): void
    }

    abstract class AbstractAnalogInput<T extends AllowedGamepadInputValues> extends AbstractGamepadInput {
      - noiseThreshold: number
      - inputDelta: number

      # <<create>> constructor(index: T, options: AnalogInputOptions = {})
      + updateStatus(gamepad: Gamepad): boolean
      # hasBeenUpdated(newValue: T): boolean
      - isOverNoiseThreshold(value: T): boolean
      - isOverInputDelta(newValue: T): boolean
      # {abstract} <<abstract>> calculateNoiseThreshold(value: T): number
      # {abstract} <<abstract>> calculateInputDelta(newValue: T): number
      + getNoiseThreshold(): number
      + setNoiseThreshold(noiseThreshold: number): void
      + getInputDelta(): number
      + setInputDelta(inputDelta: number): void
    }

    abstract class AbstractSingleAnalogInput<T: number> extends AbstractAnalogInput {
      + initializeStatus(): void
      # calculateNoiseThreshold(value: number): number
      # calculateInputDelta(newValue: number): number
    }

    class SingleAxisInput extends AbstractSingleAnalogInput {
      + <<create>> constructor(index: number, options: AnalogInputOptions = {})
      # getCurrentValue(gamepad: Gamepad): number
    }

    class AnalogButtonInput extends AbstractSingleAnalogInput {
      + <<create>> constructor(index: number, options: AnalogInputOptions = {})
      # getCurrentValue(gamepad: Gamepad): number
    }

    class DualAxisInput<T: DualAxisValue> extends AbstractAnalogInput {
      + <<create>> constructor(index: number, options: AnalogInputOptions = {})
      # getCurrentValue(gamepad: Gamepad): DualAxisValue
      + initializeStatus(): void
      # calculateNoiseThreshold(value: DualAxisValue): number
      # calculateInputDelta(newValue: DualAxisValue): number
      - calculateEuclideanDistance(orig: DualAxisValue, dest: DualAxisValue): number
    }
  }

  abstract class AbstractGamepadController<T extends GamepadMapper> <<abstract>> {
    - <<readonly>> POLL_INTERVAL_TIME_MS: number
    - pollInterval: number | null
    - <<readonly>> mapper: T
    - <<readonly>> gamepadIndex: number

    # <<create>> constructor(gamepadIndex: number, mapper: T)
    + start(): void
    + stop(): void
    + getStatus(): GamepadStatus<T>
    + {abstract} <<abstract>> handleStatusUpdated(status: Partial<GamepadStatus<T>>): void
  }

  note bottom of AbstractGamepadController
    type GamepadMapper = Record<
      string,
      AbstractGamepadInput<AllowedGamepadInputValues>
    >

    type GamepadStatus<T extends GamepadMapper> = {
      [K in keyof T]: ReturnType<T[K]['getStatus']>
    }
  end note
}

package CarController {
  abstract class AbstractCarController<T: CarMapper> {
    # <<readonly>> CAR_URL: string

    # <<create>> constructor(gamepadIndex: number, mapper: CarMapper, CAR_URL: string)
  }
  AbstractGamepadController <|-- AbstractCarController

  note right of AbstractCarController
    type Instructions = 'adelante' | 'atras' | 'parar' | 'derecha' | 'izquierda'
    type CarMapper = {
      adelante: AbstractGamepadInput<number>
      atras: AbstractGamepadInput<number>
      rotarIzq?: AbstractGamepadInput<number>
      rotarDer?: AbstractGamepadInput<number>
      direccion: AbstractGamepadInput<number>
    }
  end note

  class BasicCarController extends AbstractCarController {
    - lastInstruction: Instructions

    + <<create>> constructor(gamepadIndex: number, carMapper: CarMapper, CAR_URL: string)
    + handleStatusUpdated(): void
  }

  class AdvancedCarController extends AbstractCarController {
    + <<create>> constructor(gamepadIndex: number, carMapper: CarMapper, CAR_URL: string)
    + handleStatusUpdated(): void
  }
}

@enduml
